import static org.junit.Assert.*;  
import static org.mockito.Mockito.*;  
  
import org.junit.After;  
import org.junit.Before;  
import org.junit.Test;  
import org.junit.runner.RunWith;  
import org.mockito.Mock;  
import org.mockito.runners.MockitoJUnitRunner;  
  
import com.app.data.Portion;  
import com.app.exceptions.NotEnoughException;  
import com.app.mechanism.CoffeeMachine;  
import com.app.mechanism.interfaces.ICoffeeMachine;  
import com.app.mechanism.interfaces.IContainer;  
  
@RunWith(MockitoJUnitRunner.class)  
public class CoffeeMachineTest {  
      
    ICoffeeMachine coffeeMachine;  
      
    @Mock  
    IContainer coffeeContainer;  
    @Mock  
    IContainer waterContainer;  
  
    @Before  
    public void setUp() {  
        coffeeMachine = new CoffeeMachine(coffeeContainer, waterContainer);  
    }  
  
    @After  
    public void tearDown() {  
        coffeeContainer = null;  
        waterContainer = null;  
        coffeeMachine = null;         
    }  
  
    @Test  
    public void testMakeCoffe() throws NotEnoughException {  
          
        when(coffeeContainer.getPortion(Portion.LARGE)).thenReturn(true);  
        when(waterContainer.getPortion(Portion.LARGE)).thenReturn(true);  
          
        assertTrue(coffeeMachine.makeCoffee(Portion.LARGE));  
    }  
      
    @Test  
    public void testNotEnoughException() throws NotEnoughException {  
          
        when(coffeeContainer.getPortion(Portion.SMALL)).thenReturn(false);  
        when(waterContainer.getPortion(Portion.SMALL)).thenReturn(true);  
  
        assertFalse(coffeeMachine.makeCoffee(Portion.SMALL));  
          
    }  
  
}  

public class Fib {
	/**
	 * Fibonacci zahlen werden mit daten typ long ausgerechnet 
	 * 
	 * @param n
	 * @return
	 */
	public static long fibLong(long n) {
		if (n == 0)
			return 0;
		if (n <= 2)
			return 1;
		long l1 = fibLong(n-1);
		long l2 = fibLong(n-2);
		if(l1 > Long.MAX_VALUE - l2 ) {
		throw new ArithmeticException("Zahl zu groﬂ");
		}
		return l1+l2;
	}
		/**
		 * Fibonacci zahlen werden mit daten typ double ausgerechnet 
		 * @param n
		 * @return
		 */
		public static double fibDouble(double n) {
		
			if (n == 0)
				return 0;
			if (n <= 2)
				return 1;	
			double d1 = fibDouble(n-1);
			double d2 = fibDouble(n-2);
			if(d1 > Double.MAX_VALUE - d2 ) {
			throw new ArithmeticException("Zahl zu groﬂ");
			}
			return d1+d2;
			
		}
	}

public class Fib2 {
	/**
	 * Fibonacci zahlen werden mit daten typ double ausgerechnet 
	 * @param n
	 * @return
	 */
	public static double fibDouble(double n) {
	
		if (n == 0)
			return 0;
		if (n <= 2)
			return 1;	
		double d1 = fibDouble(n-1);
		double d2 = fibDouble(n-2);
		if(d1 > Double.MAX_VALUE - d2 ) {
		throw new ArithmeticException("Zahl zu groﬂ");
		}
		return d1+d2;
		
	}
		


	public static void main(String[]args){
		for(int i =0; i<= 40;i++){
			System.out.println("stelle "+i+" ist " +fibDouble(i));
		}
	}
}


public class Test {
	public static void main(String[]args){
		for(long i=0; i<= 500; i++){
			
			System.out.println(Fib.fibDouble(i));
			System.out.println(Fib.fibLong(i));
			
		}
	}
}

